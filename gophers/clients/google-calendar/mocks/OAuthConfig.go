// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	oauth2 "golang.org/x/oauth2"
)

// OAuthConfig is an autogenerated mock type for the OAuthConfig type
type OAuthConfig struct {
	mock.Mock
}

// AuthCodeURL provides a mock function with given fields: state, opts
func (_m *OAuthConfig) AuthCodeURL(state string, opts ...oauth2.AuthCodeOption) string {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, state)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AuthCodeURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...oauth2.AuthCodeOption) string); ok {
		r0 = rf(state, opts...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Exchange provides a mock function with given fields: ctx, code
func (_m *OAuthConfig) Exchange(ctx context.Context, code string) (*oauth2.Token, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for Exchange")
	}

	var r0 *oauth2.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*oauth2.Token, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *oauth2.Token); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenSource provides a mock function with given fields: ctx, t
func (_m *OAuthConfig) TokenSource(ctx context.Context, t *oauth2.Token) oauth2.TokenSource {
	ret := _m.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for TokenSource")
	}

	var r0 oauth2.TokenSource
	if rf, ok := ret.Get(0).(func(context.Context, *oauth2.Token) oauth2.TokenSource); ok {
		r0 = rf(ctx, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oauth2.TokenSource)
		}
	}

	return r0
}

// NewOAuthConfig creates a new instance of OAuthConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOAuthConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *OAuthConfig {
	mock := &OAuthConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

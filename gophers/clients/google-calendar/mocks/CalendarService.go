// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	calendar "google.golang.org/api/calendar/v3"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// CalendarService is an autogenerated mock type for the CalendarService type
type CalendarService struct {
	mock.Mock
}

// ListCalendars provides a mock function with given fields: _a0, _a1
func (_m *CalendarService) ListCalendars(_a0 context.Context, _a1 *calendar.Service) (*calendar.CalendarList, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListCalendars")
	}

	var r0 *calendar.CalendarList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *calendar.Service) (*calendar.CalendarList, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *calendar.Service) *calendar.CalendarList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*calendar.CalendarList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *calendar.Service) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEvents provides a mock function with given fields: _a0, _a1, _a2
func (_m *CalendarService) ListEvents(_a0 context.Context, _a1 *calendar.Service, _a2 string) (*calendar.Events, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ListEvents")
	}

	var r0 *calendar.Events
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *calendar.Service, string) (*calendar.Events, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *calendar.Service, string) *calendar.Events); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*calendar.Events)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *calendar.Service, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService provides a mock function with given fields: _a0, _a1
func (_m *CalendarService) NewService(_a0 context.Context, _a1 *http.Client) (*calendar.Service, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for NewService")
	}

	var r0 *calendar.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Client) (*calendar.Service, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *http.Client) *calendar.Service); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*calendar.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *http.Client) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCalendarService creates a new instance of CalendarService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCalendarService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CalendarService {
	mock := &CalendarService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	calendar "google.golang.org/api/calendar/v3"

	mock "github.com/stretchr/testify/mock"
)

// GoogleCalendar is an autogenerated mock type for the GoogleCalendar type
type GoogleCalendar struct {
	mock.Mock
}

// FetchCalendars provides a mock function with given fields: _a0, _a1, _a2
func (_m *GoogleCalendar) FetchCalendars(_a0 context.Context, _a1 int, _a2 string) ([]*calendar.CalendarListEntry, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for FetchCalendars")
	}

	var r0 []*calendar.CalendarListEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) ([]*calendar.CalendarListEntry, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) []*calendar.CalendarListEntry); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*calendar.CalendarListEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchEventsWithCode provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *GoogleCalendar) FetchEventsWithCode(_a0 context.Context, _a1 int, _a2 string, _a3 string) ([]*calendar.Event, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for FetchEventsWithCode")
	}

	var r0 []*calendar.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string) ([]*calendar.Event, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string) []*calendar.Event); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*calendar.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchEventsWithUserID provides a mock function with given fields: _a0, _a1, _a2
func (_m *GoogleCalendar) FetchEventsWithUserID(_a0 context.Context, _a1 int, _a2 string) ([]*calendar.Event, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for FetchEventsWithUserID")
	}

	var r0 []*calendar.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) ([]*calendar.Event, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) []*calendar.Event); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*calendar.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthCodeURL provides a mock function with given fields: _a0, _a1
func (_m *GoogleCalendar) GetAuthCodeURL(_a0 context.Context, _a1 string) string {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthCodeURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewGoogleCalendar creates a new instance of GoogleCalendar. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGoogleCalendar(t interface {
	mock.TestingT
	Cleanup(func())
}) *GoogleCalendar {
	mock := &GoogleCalendar{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
